// This is the master top-level pipeline that triggers both the build pipeline and the downstream triggered jobs
library(identifier: "jenkins-shared-libraries@20190514-0", changelog: false)

String buildJobName =  'suite-release'
Map suiteParameters

node('non-master') {
  properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', 
                    artifactNumToKeepStr: '3', 
                    daysToKeepStr: '', 
                    numToKeepStr: '45')), 
    disableConcurrentBuilds()
  ])

  timestamps {
    catchError {
      stage('Checkout') {
        checkout scm
      }

      stage('Configure') {
        suiteParameters = suite.parameters(buildJobName)
      }

      if (!params.NOOP) {
        stage('Build') {
          job.trigger(buildJobName, suiteParameters)
        }

        stage('Deployment') {
          job.trigger('deployment-sculptor', suiteParameters)
        }

        stage('Validations / Triggers') {
          parallel(
            'github-commits-pipeline': {
              job.trigger('engops/github-commits-pipelines', suiteParameters, false)
            },
            'remote-ip-job-trigger': {
              job.trigger('engops/remote-ip-job-trigger', suiteParameters, false)
            },
            'regression-smoketest-job-trigger': {
              job.trigger('engops/regression-smoketest-job-trigger', suiteParameters, false)
            },
            'remote-qa-automation-trigger': {
              job.trigger('engops/remote-qa-automation-trigger', suiteParameters, false)
            },
            'snapshot-checker': {
              job.trigger('snapshot-checker', suiteParameters, false)
            },
            'obfuscation-verifier': {
              job.trigger('obfuscation-verifier', suiteParameters, false)
            }
          )
        }
      }

      if (params.BUILD_SERVICEPACK && !params.NOOP) {
        stage('Service Pack') {
          stage('Aggregation Designer') {
            job.trigger('service-pack-installers-aggregation-designer', suiteParameters)
          }
          stage('Pentaho Server') {
            job.trigger('service-pack-installers-pentaho-server', suiteParameters)
          }
          stage('DI Client') {
            job.trigger('service-pack-installers-di-client', suiteParameters)
          }
          stage('Metadata Editor') {
            job.trigger('service-pack-installers-metadata-editor', suiteParameters)
          }
          stage('Report Designer') {
            job.trigger('service-pack-installers-report-designer', suiteParameters)
          }
          stage('Schema Workbench') {
            job.trigger('service-pack-installers-schema-workbench', suiteParameters)
          }
          stage('Manual Big Data Plugin') {
            job.trigger('service-pack-manual-big-data-plugin', suiteParameters)
          }
          stage('Platform Installer Bundler') {
            job.trigger('service-pack-platform-installer-bundler', suiteParameters)
          }
 
          stage('Deployment (SP)') {
            job.trigger('deployment-sculptor-sp', suiteParameters)
          }
        }
      }
    }
    
    notifyBuildResult(currentBuild.result)
  }
}

def notifyBuildResult(buildStatus) {
    def color
    if (buildStatus == "SUCCESS") {
      color = 'good'
    }
    else if (buildStatus == "UNSTABLE") {
      color = 'warning'
    }
    else {
      color = 'danger'
    }
    slackChannel = params.BUILD_SLACK_CHANNEL ?: ''
    slackSend (color: color, message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", channel:slackChannel)
}
