@Library("jenkins-shared-libraries@master") _
import org.hitachivantara.ci.GroovyUtils

properties(
  [parameters(
    [string(defaultValue: 'https://github.com/pentaho/jenkins-pipelines.git', description: 'Jenkins pipeline URL', name: 'PIPELINE_URL'),
     string(defaultValue: 'master', description: 'Jenkins pipeline branch', name: 'PIPELINE_BRANCH'),
     string(defaultValue: 'sample-pipeline.yaml', description: 'Build data file', name: 'BUILD_DATA_FILE'),
     choice(choices: ['create', 'delete'], description: '', name: 'COMMAND'),
     string(defaultValue: '', description: 'Target branch or tag', name: 'TARGET_BRANCH_TAG'),
     booleanParam(defaultValue: true, description: '', name: 'BRANCHES'),
     booleanParam(defaultValue: false, description: '', name: 'TAGS'),
     booleanParam(defaultValue: false, description: '', name: 'NOOP')]
  )])

node {
    stage('Branch/Tag'){
        git(url: params.PIPELINE_URL, branch: params.PIPELINE_BRANCH, credentialsId: 'github-buildguy')

        def buildData = config.load(BUILD_DATA_FILE: params.BUILD_DATA_FILE)

        // Make sure groovy is installed
        sh "groovy --version"

        // Create github-projects.csv for existing branching tagging script, unique by org/repo
        // The csv file requires repo URLs to be in ssh format
        def githubProjectsPath = "${WORKSPACE}/scripts/github-projects.csv"
        def content = ""
        def jobItems = GroovyUtils.unique(buildData.allItems, { it.scmOrganization + it.scmRepository  })
        jobItems.each { item ->
          content += "RELEASE,git@github.com:${item.scmOrganization}/${item.scmRepository}.git,${item.scmBranch},\n"
        }
        writeFile file: githubProjectsPath, text: content

        // Call the BranchingTagging script with github-buildguy credentials
        withCredentials([usernamePassword(
          credentialsId: "github-buildguy",
          usernameVariable: 'GIT_USERNAME',
          passwordVariable: 'GIT_PASSWORD'
        )]) {
          sh """
            groovy -cp ${WORKSPACE}/scripts/classes -Dgroovy.grape.report.downloads=true \
            -DGITHUB_API_TOKEN=${GIT_PASSWORD} \
            -DGITHUB_PROJECTS_CSV_PATH=${githubProjectsPath} \
            -DCOMMAND=${params.COMMAND} \
            -DBRANCHES=${params.BRANCHES} -DTAGS=${params.TAGS} \
            -DTARGET_BRANCH_TAG=${params.TARGET_BRANCH_TAG} \
            -DNOOP=${params.NOOP} ${WORKSPACE}/scripts/BranchingTagging.groovy
          """
        }

        // Set the build description
        if (params.BRANCHES) {
          currentBuild.description = "${params.TARGET_BRANCH_TAG} branch ${params.COMMAND}"
        }
        else if (params.TAGS) {
          currentBuild.description = "${params.TARGET_BRANCH_TAG} tag ${params.COMMAND}"
        }
        else if (params.NOOP) {
          currentBuild.description = "${params.TARGET_BRANCH_TAG} noop"
        }
    }
}