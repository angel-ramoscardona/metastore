// This is the master top-level pipeline that triggers both the build pipeline and the downstream triggered jobs

String jobParentFolder = params.JENKINS_FOLDER_NAME ?: "8.3"

String releaseVersion = params.RELEASE_VERSION ?: "8.3.0.1"
String suiteBuildResourcesBranch = params.SUITE_BUILD_RESOURCES_BRANCH ?: "8.3.0.1"
String suiteReleaseVersion = params.SUITE_RELEASE_VERSION ?: "8.3-QAT"
String buildHostingRoot = params.BUILD_HOSTING_ROOT ?: "/build2/artifacts/hosted"
String previousUpgradeReleaseVersion = params.PREVIOUS_UPGRADE_RELEASE_VERSION ?: "8.1.0.6-682"
String versionMergerVersion = params.VERSION_MERGER_VERSION ?: "1.0.7"
String mavenPublicReleaseRepoURL = params.MAVEN_PUBLIC_RELEASE_REPO_URL ?: "https://nexus.pentaho.org/content/repositories/public-8.3-qat"
String mavenPrivateReleaseRepoURL = params.MAVEN_PRIVATE_RELEASE_REPO_URL ?: "https://nexus.pentaho.org/content/repositories/private-8.3-qat"
String mavenPublicSnapshotRepoURL = params.MAVEN_PUBLIC_SNAPSHOT_REPO_URL ?: ""
String mavenPrivateSnapshotRepoURL = params.MAVEN_PRIVATE_SNAPSHOT_REPO_URL ?: ""
String mavenResolveRepoURL = params.MAVEN_RESOLVE_REPO_URL ?: "https://nexus.pentaho.org/content/groups/omni"

String buildJobName = "${jobParentFolder}/suite-release"
String releaseBuildNumber = releaseBuildNumberForJobName(buildJobName)
List passOnParameters = [string(name:"RELEASE_BUILD_NUMBER",            value:releaseBuildNumber),
                         string(name:"RELEASE_BUILD_ID",                value:env.BUILD_TIMESTAMP),
                         string(name:"RELEASE_VERSION",                 value:"${releaseVersion}"),
                         string(name:"SUITE_BUILD_RESOURCES_BRANCH",    value:"${suiteBuildResourcesBranch}"),
                         string(name:"SUITE_RELEASE_VERSION",           value:"${suiteReleaseVersion}"),
                         string(name:"JENKINS_FOLDER_NAME",             value:"${jobParentFolder}"),
                         string(name:"BUILD_ID_TAIL",                   value:"-${releaseBuildNumber}"),
                         string(name:"BUILD_HOSTING_ROOT",              value:"${buildHostingRoot}"),
                         string(name:"PREVIOUS_UPGRADE_RELEASE_VERSION", value:"${previousUpgradeReleaseVersion}"),
                         string(name:"VERSION_MERGER_VERSION",          value:"${versionMergerVersion}"),
                         string(name:"MAVEN_PUBLIC_RELEASE_REPO_URL",   value:"${mavenPublicReleaseRepoURL}"),
                         string(name:"MAVEN_PUBLIC_SNAPSHOT_REPO_URL",  value:"${mavenPublicSnapshotRepoURL}"),
                         string(name:"MAVEN_PRIVATE_RELEASE_REPO_URL",  value:"${mavenPrivateReleaseRepoURL}"),
                         string(name:"MAVEN_PRIVATE_SNAPSHOT_REPO_URL", value:"${mavenPrivateSnapshotRepoURL}"),
                         string(name:"MAVEN_RESOLVE_REPO_URL",          value:"${mavenResolveRepoURL}")]

pipeline {

  agent {
    label 'non-master'
  }

  parameters {
    booleanParam(
        name: 'NOOP',
        defaultValue: false,
        description: 'No op build (test the build config)'
    )
  }

  options {
    timestamps()
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '45', artifactNumToKeepStr: '3'))
  }

  stages {
    stage('Configure') {
      steps {
        script {
          if (params.OVERRIDE_PARAMS) {
            passOnParameters << string(name:"OVERRIDE_PARAMS",value:params.OVERRIDE_PARAMS)
          }
          echo "Passed on parameters: ${passOnParameters}"
        }
      }
    }

    stage('Upgrade Path') {
      stages {
        stage("Pentaho Server") {
          steps {
            triggerJob("${jobParentFolder}/upgrade-path-installers-pentaho-server", passOnParameters)
          }
        }
      }
    }
  }
}

void triggerJob(job, parameters) {

  script {
    def res = build(
      job: job,
      wait: true,
      propagate: false,
      parameters: parameters
    )
    if (res) {
      currentBuild.result = res.result
      if (res.result == 'FAILURE')
        throw new Exception("Job ${job} failed")
    }
  }
}

void releaseBuildNumberForJobName(jobName) {
  def job = Jenkins.instance.getItemByFullName(jobName)
  if (!job) {
    // getItemByFullName doesn't work with relative job paths, and getItem returns nothing
    def thisJobName = env.JOB_NAME
    if (thisJobName.contains("/")) {
      int index = thisJobName.lastIndexOf("/")
      def jenkinsFolderName = thisJobName.substring(0, index)
      def fullJobName = "${jenkinsFolderName}/${jobName}"
      job = Jenkins.instance.getItemByFullName(fullJobName)
    }
  }

  if (!job) {
    throw new Exception("Unknown job: ${jobName}")
  }

  return params.RELEASE_BUILD_NUMBER ?: job.nextBuildNumber
}
